{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","style","margin","padding","key","type","name","onClick","Notification","message","App","state","handleClick","e","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAXC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,iCACI,4BAAKD,GACJC,ICgBMC,EAnBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,oCACI,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,QCeOC,EArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,4BACEC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,OAClCC,IAAKJ,EACLK,KAAK,SACLC,KAAMN,EACNO,QAAST,GAERE,QCFMQ,EARM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACjB,2BAAIA,ICsDOC,E,4MAnDbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,YAAc,SAACC,GACb,IAAMP,EAAOO,EAAEC,OAAOR,KACtB,EAAKS,UAAS,SAACJ,GAAD,mBAAC,eACVA,GADS,kBAEXL,EAAO,EAAKK,MAAML,GAAQ,Q,EAK/BU,mBAAqB,kBACnB,EAAKL,MAAMpB,KAAO,EAAKoB,MAAMnB,QAAU,EAAKmB,MAAMlB,K,EAEpDwB,gCAAkC,kBAChC,EAAKN,MAAMpB,KACP2B,KAAKC,MAAO,EAAKR,MAAMpB,KAAO,EAAKyB,qBAAwB,KAC3D,G,uDAEI,IAAD,EACwBI,KAAKT,MAA5BpB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,kBAAC,EAAD,CAASL,MAAM,yBACb,kBAAC,EAAD,CACES,QAASwB,OAAOC,KAAKF,KAAKT,OAC1Bb,gBAAiBsB,KAAKR,eAGzBQ,KAAKJ,qBACJ,kBAAC,EAAD,CAAS5B,MAAM,cACb,kBAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,KAAKJ,qBACZrB,mBAAoByB,KAAKH,qCAI7B,kBAAC,EAAD,CAAcR,QAAQ,2B,GA7Cdc,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7fd345ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({title, children})=> (\n    <section>\n        <h2>{title}</h2>\n        {children}\n    </section>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Section;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({good, neutral, bad, total, positivePercentage})=>(\n    <>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive feedback: {positivePercentage} %</p>\n    </>\n);\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired\n}\n\n\nexport default Statistics;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map((option) => (\n      <button\n        style={{ margin: \"10px\", padding: \"5px\" }}\n        key={option}\n        type=\"button\"\n        name={option}\n        onClick={onLeaveFeedback}\n      >\n        {option}\n      </button>\n    ))}\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message})=>(\n    <p>{message}</p>\n);\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired\n};\n\nexport default Notification;","import React, { Component } from \"react\";\nimport Section from \"./Section/Section\";\nimport Statistics from \"./Statistics/Statistics\";\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleClick = (e) => {\n    const name = e.target.name;\n    this.setState((state) => ({\n      ...state,\n      [name]: this.state[name] + 1,\n    }));\n\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    this.state.good\n      ? Math.round((this.state.good / this.countTotalFeedback()) * 100)\n      : 0;\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        {this.countTotalFeedback() ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}